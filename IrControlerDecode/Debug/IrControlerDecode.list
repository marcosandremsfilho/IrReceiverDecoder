
IrControlerDecode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002268  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002400  08002400  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002400  08002400  00012400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002408  08002408  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002408  08002408  00012408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800240c  0800240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000088  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009377  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015cc  00000000  00000000  000293b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002a980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e0  00000000  00000000  0002b308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de04  00000000  00000000  0002bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009dd0  00000000  00000000  000499ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9afc  00000000  00000000  000537bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010d2b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002794  00000000  00000000  0010d308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023d8 	.word	0x080023d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023d8 	.word	0x080023d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_GPIO_EXTI_Callback>:
uint32_t timeOn;
uint32_t timeOff;

int teste;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == SensorIR_Pin) {
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004dc:	d139      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0x86>
			if (timeOffTest > 3500 && timeOffTest < 5500){
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <HAL_GPIO_EXTI_Callback+0x8c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f640 52ac 	movw	r2, #3500	; 0xdac
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d908      	bls.n	80004fc <HAL_GPIO_EXTI_Callback+0x30>
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <HAL_GPIO_EXTI_Callback+0x8c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f241 527b 	movw	r2, #5499	; 0x157b
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d802      	bhi.n	80004fc <HAL_GPIO_EXTI_Callback+0x30>
				getCode();
 80004f6:	f000 f839 	bl	800056c <getCode>
 80004fa:	e02a      	b.n	8000552 <HAL_GPIO_EXTI_Callback+0x86>
			} else if(HAL_GPIO_ReadPin(SensorIR_GPIO_Port, SensorIR_Pin) && bit < 1) {
 80004fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000500:	4816      	ldr	r0, [pc, #88]	; (800055c <HAL_GPIO_EXTI_Callback+0x90>)
 8000502:	f000 fe4d 	bl	80011a0 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00c      	beq.n	8000526 <HAL_GPIO_EXTI_Callback+0x5a>
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <HAL_GPIO_EXTI_Callback+0x94>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	dc08      	bgt.n	8000526 <HAL_GPIO_EXTI_Callback+0x5a>
				timeOffTest = microsecondsTime;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_GPIO_EXTI_Callback+0x98>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_GPIO_EXTI_Callback+0x8c>)
 800051c:	601a      	str	r2, [r3, #0]
				microsecondsTime = 0;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <HAL_GPIO_EXTI_Callback+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	801a      	strh	r2, [r3, #0]
 8000524:	e015      	b.n	8000552 <HAL_GPIO_EXTI_Callback+0x86>
			} else if (!HAL_GPIO_ReadPin(SensorIR_GPIO_Port, SensorIR_Pin) && bit < 1) {
 8000526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <HAL_GPIO_EXTI_Callback+0x90>)
 800052c:	f000 fe38 	bl	80011a0 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d10c      	bne.n	8000550 <HAL_GPIO_EXTI_Callback+0x84>
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_GPIO_EXTI_Callback+0x94>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	dc08      	bgt.n	8000550 <HAL_GPIO_EXTI_Callback+0x84>
				timeOnTest = microsecondsTime;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_GPIO_EXTI_Callback+0x98>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000546:	601a      	str	r2, [r3, #0]
				microsecondsTime = 0;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_GPIO_EXTI_Callback+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
 800054e:	e000      	b.n	8000552 <HAL_GPIO_EXTI_Callback+0x86>
			} else return;
 8000550:	bf00      	nop
		}
}
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000084 	.word	0x20000084
 800055c:	40020400 	.word	0x40020400
 8000560:	20000078 	.word	0x20000078
 8000564:	2000007c 	.word	0x2000007c
 8000568:	20000080 	.word	0x20000080

0800056c <getCode>:

void getCode(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(SensorIR_GPIO_Port, SensorIR_Pin)) {
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	483a      	ldr	r0, [pc, #232]	; (8000660 <getCode+0xf4>)
 8000576:	f000 fe13 	bl	80011a0 <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d008      	beq.n	8000592 <getCode+0x26>
			timeOff = microsecondsTime;
 8000580:	4b38      	ldr	r3, [pc, #224]	; (8000664 <getCode+0xf8>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b38      	ldr	r3, [pc, #224]	; (8000668 <getCode+0xfc>)
 8000588:	601a      	str	r2, [r3, #0]
			microsecondsTime = 0;
 800058a:	4b36      	ldr	r3, [pc, #216]	; (8000664 <getCode+0xf8>)
 800058c:	2200      	movs	r2, #0
 800058e:	801a      	strh	r2, [r3, #0]
 8000590:	e00f      	b.n	80005b2 <getCode+0x46>
		} else if (!HAL_GPIO_ReadPin(SensorIR_GPIO_Port, SensorIR_Pin)) {
 8000592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000596:	4832      	ldr	r0, [pc, #200]	; (8000660 <getCode+0xf4>)
 8000598:	f000 fe02 	bl	80011a0 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d107      	bne.n	80005b2 <getCode+0x46>
			timeOn = microsecondsTime;
 80005a2:	4b30      	ldr	r3, [pc, #192]	; (8000664 <getCode+0xf8>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	4b30      	ldr	r3, [pc, #192]	; (800066c <getCode+0x100>)
 80005aa:	601a      	str	r2, [r3, #0]
			microsecondsTime = 0;
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <getCode+0xf8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	801a      	strh	r2, [r3, #0]
		}
		if ((timeOff > 200 && timeOff < 350) && (timeOn > 750 && timeOn < 900) && bit < 32) {
 80005b2:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <getCode+0xfc>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2bc8      	cmp	r3, #200	; 0xc8
 80005b8:	d91e      	bls.n	80005f8 <getCode+0x8c>
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <getCode+0xfc>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80005c2:	d219      	bcs.n	80005f8 <getCode+0x8c>
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <getCode+0x100>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d913      	bls.n	80005f8 <getCode+0x8c>
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <getCode+0x100>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80005d8:	d20e      	bcs.n	80005f8 <getCode+0x8c>
 80005da:	4b25      	ldr	r3, [pc, #148]	; (8000670 <getCode+0x104>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b1f      	cmp	r3, #31
 80005e0:	dc0a      	bgt.n	80005f8 <getCode+0x8c>
				decodeSignal = (decodeSignal << 1);
 80005e2:	4b24      	ldr	r3, [pc, #144]	; (8000674 <getCode+0x108>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4a22      	ldr	r2, [pc, #136]	; (8000674 <getCode+0x108>)
 80005ea:	6013      	str	r3, [r2, #0]
				bit++;
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <getCode+0x104>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a1f      	ldr	r2, [pc, #124]	; (8000670 <getCode+0x104>)
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	e031      	b.n	800065c <getCode+0xf0>
			} else if ((timeOff > 200 && timeOff < 350) && (timeOn > 950 && timeOn < 1250) && bit < 32) {
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <getCode+0xfc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2bc8      	cmp	r3, #200	; 0xc8
 80005fe:	d91e      	bls.n	800063e <getCode+0xd2>
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <getCode+0xfc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000608:	d219      	bcs.n	800063e <getCode+0xd2>
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <getCode+0x100>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000612:	4293      	cmp	r3, r2
 8000614:	d913      	bls.n	800063e <getCode+0xd2>
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <getCode+0x100>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800061e:	4293      	cmp	r3, r2
 8000620:	d80d      	bhi.n	800063e <getCode+0xd2>
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <getCode+0x104>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b1f      	cmp	r3, #31
 8000628:	dc09      	bgt.n	800063e <getCode+0xd2>
				decodeSignal = (decodeSignal << 0);
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <getCode+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a11      	ldr	r2, [pc, #68]	; (8000674 <getCode+0x108>)
 8000630:	6013      	str	r3, [r2, #0]
				bit++;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <getCode+0x104>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <getCode+0x104>)
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	e00e      	b.n	800065c <getCode+0xf0>
			} else if (bit>= 32) {
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <getCode+0x104>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b1f      	cmp	r3, #31
 8000644:	dd0a      	ble.n	800065c <getCode+0xf0>
				bit = 0;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <getCode+0x104>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
				Signal = decodeSignal;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <getCode+0x108>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <getCode+0x10c>)
 8000652:	6013      	str	r3, [r2, #0]
				decodeSignal = 0;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <getCode+0x108>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
			}
}
 800065a:	e7ff      	b.n	800065c <getCode+0xf0>
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020400 	.word	0x40020400
 8000664:	2000007c 	.word	0x2000007c
 8000668:	2000008c 	.word	0x2000008c
 800066c:	20000088 	.word	0x20000088
 8000670:	20000078 	.word	0x20000078
 8000674:	20000070 	.word	0x20000070
 8000678:	20000074 	.word	0x20000074

0800067c <HAL_TIM_PeriodElapsedCallback>:
		bit = 0;
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if(htim == &htim1) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d10b      	bne.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0x28>
		if(microsecondsTime < 65535) {
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000694:	4293      	cmp	r3, r2
 8000696:	d005      	beq.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0x28>
			microsecondsTime++;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80006a2:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	20000028 	.word	0x20000028
 80006b4:	2000007c 	.word	0x2000007c

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fa50 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f822 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f8da 	bl	800087c <MX_GPIO_Init>
  MX_TIM1_Init();
 80006c8:	f000 f888 	bl	80007dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80006cc:	480b      	ldr	r0, [pc, #44]	; (80006fc <main+0x44>)
 80006ce:	f001 fa25 	bl	8001b1c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2110      	movs	r1, #16
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <main+0x48>)
 80006d8:	f000 fd7a 	bl	80011d0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2120      	movs	r1, #32
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <main+0x48>)
 80006e2:	f000 fd75 	bl	80011d0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2101      	movs	r1, #1
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <main+0x4c>)
 80006ec:	f000 fd70 	bl	80011d0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2102      	movs	r1, #2
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <main+0x4c>)
 80006f6:	f000 fd6b 	bl	80011d0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80006fa:	e7ea      	b.n	80006d2 <main+0x1a>
 80006fc:	20000028 	.word	0x20000028
 8000700:	40020800 	.word	0x40020800
 8000704:	40020400 	.word	0x40020400

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fe56 	bl	80023c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <SystemClock_Config+0xcc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800077c:	23a8      	movs	r3, #168	; 0xa8
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fd51 	bl	8001234 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 f8de 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2105      	movs	r1, #5
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 ffb2 	bl	8001724 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c6:	f000 f8c7 	bl	8000958 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_TIM1_Init+0x98>)
 80007fa:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <MX_TIM1_Init+0x9c>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_TIM1_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_TIM1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_TIM1_Init+0x98>)
 800080c:	22a8      	movs	r2, #168	; 0xa8
 800080e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_TIM1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_TIM1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_TIM1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_TIM1_Init+0x98>)
 8000824:	f001 f92a 	bl	8001a7c <HAL_TIM_Base_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800082e:	f000 f893 	bl	8000958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	4619      	mov	r1, r3
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_TIM1_Init+0x98>)
 8000840:	f001 fae4 	bl	8001e0c <HAL_TIM_ConfigClockSource>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800084a:	f000 f885 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800084e:	2320      	movs	r3, #32
 8000850:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <MX_TIM1_Init+0x98>)
 800085c:	f001 fd00 	bl	8002260 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000866:	f000 f877 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000028 	.word	0x20000028
 8000878:	40010000 	.word	0x40010000

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a2c      	ldr	r2, [pc, #176]	; (800094c <MX_GPIO_Init+0xd0>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a25      	ldr	r2, [pc, #148]	; (800094c <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2130      	movs	r1, #48	; 0x30
 80008ce:	4820      	ldr	r0, [pc, #128]	; (8000950 <MX_GPIO_Init+0xd4>)
 80008d0:	f000 fc7e 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2103      	movs	r1, #3
 80008d8:	481e      	ldr	r0, [pc, #120]	; (8000954 <MX_GPIO_Init+0xd8>)
 80008da:	f000 fc79 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80008de:	2330      	movs	r3, #48	; 0x30
 80008e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4619      	mov	r1, r3
 80008f4:	4816      	ldr	r0, [pc, #88]	; (8000950 <MX_GPIO_Init+0xd4>)
 80008f6:	f000 fab7 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80008fa:	2303      	movs	r3, #3
 80008fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4810      	ldr	r0, [pc, #64]	; (8000954 <MX_GPIO_Init+0xd8>)
 8000912:	f000 faa9 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SensorIR_Pin */
  GPIO_InitStruct.Pin = SensorIR_Pin;
 8000916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800091c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SensorIR_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <MX_GPIO_Init+0xd8>)
 800092e:	f000 fa9b 	bl	8000e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2017      	movs	r0, #23
 8000938:	f000 fa5f 	bl	8000dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800093c:	2017      	movs	r0, #23
 800093e:	f000 fa78 	bl	8000e32 <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3720      	adds	r7, #32
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020800 	.word	0x40020800
 8000954:	40020400 	.word	0x40020400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <HAL_TIM_Base_MspInit+0x78>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12d      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <HAL_TIM_Base_MspInit+0x7c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a18      	ldr	r2, [pc, #96]	; (8000a30 <HAL_TIM_Base_MspInit+0x7c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_TIM_Base_MspInit+0x7c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2018      	movs	r0, #24
 80009e8:	f000 fa07 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80009ec:	2018      	movs	r0, #24
 80009ee:	f000 fa20 	bl	8000e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2019      	movs	r0, #25
 80009f8:	f000 f9ff 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009fc:	2019      	movs	r0, #25
 80009fe:	f000 fa18 	bl	8000e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	201a      	movs	r0, #26
 8000a08:	f000 f9f7 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000a0c:	201a      	movs	r0, #26
 8000a0e:	f000 fa10 	bl	8000e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	201b      	movs	r0, #27
 8000a18:	f000 f9ef 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a1c:	201b      	movs	r0, #27
 8000a1e:	f000 fa08 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40010000 	.word	0x40010000
 8000a30:	40023800 	.word	0x40023800

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8c0 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SensorIR_Pin);
 8000a8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a90:	f000 fbb8 	bl	8001204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000a9e:	f001 f8ad 	bl	8001bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000028 	.word	0x20000028

08000aac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ab2:	f001 f8a3 	bl	8001bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000028 	.word	0x20000028

08000ac0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000ac6:	f001 f899 	bl	8001bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000028 	.word	0x20000028

08000ad4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM1_CC_IRQHandler+0x10>)
 8000ada:	f001 f88f 	bl	8001bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000028 	.word	0x20000028

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b12:	490e      	ldr	r1, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b28:	4c0b      	ldr	r4, [pc, #44]	; (8000b58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b36:	f7ff ffd7 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f001 fc21 	bl	8002380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fdbb 	bl	80006b8 <main>
  bx  lr    
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b50:	08002410 	.word	0x08002410
  ldr r2, =_sbss
 8000b54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b58:	20000094 	.word	0x20000094

08000b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_Init+0x40>)
 8000b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_Init+0x40>)
 8000b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_Init+0x40>)
 8000b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f92b 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fee6 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023c00 	.word	0x40023c00

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f943 	bl	8000e4e <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f90b 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000090 	.word	0x20000090

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000090 	.word	0x20000090

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff29 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff3e 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff8e 	bl	8000d38 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff31 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffa2 	bl	8000da0 <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e16b      	b.n	800115c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 815a 	bne.w	8001156 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d005      	beq.n	8000eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d130      	bne.n	8000f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d017      	beq.n	8000f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80b4 	beq.w	8001156 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b60      	ldr	r3, [pc, #384]	; (8001174 <HAL_GPIO_Init+0x30c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a5f      	ldr	r2, [pc, #380]	; (8001174 <HAL_GPIO_Init+0x30c>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <HAL_GPIO_Init+0x30c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100a:	4a5b      	ldr	r2, [pc, #364]	; (8001178 <HAL_GPIO_Init+0x310>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_GPIO_Init+0x314>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d02b      	beq.n	800108e <HAL_GPIO_Init+0x226>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a51      	ldr	r2, [pc, #324]	; (8001180 <HAL_GPIO_Init+0x318>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d025      	beq.n	800108a <HAL_GPIO_Init+0x222>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a50      	ldr	r2, [pc, #320]	; (8001184 <HAL_GPIO_Init+0x31c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x21e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <HAL_GPIO_Init+0x320>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_GPIO_Init+0x21a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4e      	ldr	r2, [pc, #312]	; (800118c <HAL_GPIO_Init+0x324>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x216>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4d      	ldr	r2, [pc, #308]	; (8001190 <HAL_GPIO_Init+0x328>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x212>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4c      	ldr	r2, [pc, #304]	; (8001194 <HAL_GPIO_Init+0x32c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x20e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4b      	ldr	r2, [pc, #300]	; (8001198 <HAL_GPIO_Init+0x330>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x20a>
 800106e:	2307      	movs	r3, #7
 8001070:	e00e      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001072:	2308      	movs	r3, #8
 8001074:	e00c      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001076:	2306      	movs	r3, #6
 8001078:	e00a      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800107a:	2305      	movs	r3, #5
 800107c:	e008      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800107e:	2304      	movs	r3, #4
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001082:	2303      	movs	r3, #3
 8001084:	e004      	b.n	8001090 <HAL_GPIO_Init+0x228>
 8001086:	2302      	movs	r3, #2
 8001088:	e002      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x228>
 800108e:	2300      	movs	r3, #0
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	f002 0203 	and.w	r2, r2, #3
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	4093      	lsls	r3, r2
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a0:	4935      	ldr	r1, [pc, #212]	; (8001178 <HAL_GPIO_Init+0x310>)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ae:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_GPIO_Init+0x334>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d2:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_GPIO_Init+0x334>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d8:	4b30      	ldr	r3, [pc, #192]	; (800119c <HAL_GPIO_Init+0x334>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010fc:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_GPIO_Init+0x334>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_GPIO_Init+0x334>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_GPIO_Init+0x334>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_GPIO_Init+0x334>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_GPIO_Init+0x334>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	f67f ae90 	bls.w	8000e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40013800 	.word	0x40013800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40021000 	.word	0x40021000
 8001190:	40021400 	.word	0x40021400
 8001194:	40021800 	.word	0x40021800
 8001198:	40021c00 	.word	0x40021c00
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e001      	b.n	80011c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f952 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e267      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d075      	beq.n	800133e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b85      	ldr	r3, [pc, #532]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001266:	2b08      	cmp	r3, #8
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b82      	ldr	r3, [pc, #520]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b7e      	ldr	r3, [pc, #504]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05b      	beq.n	800133c <HAL_RCC_OscConfig+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d157      	bne.n	800133c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e242      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x74>
 800129a:	4b76      	ldr	r3, [pc, #472]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6f      	ldr	r2, [pc, #444]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6c      	ldr	r2, [pc, #432]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012cc:	4b69      	ldr	r3, [pc, #420]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a68      	ldr	r2, [pc, #416]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b66      	ldr	r3, [pc, #408]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a65      	ldr	r2, [pc, #404]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fc9e 	bl	8000c2c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fc9a 	bl	8000c2c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e207      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xc0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fc8a 	bl	8000c2c <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fc86 	bl	8000c2c <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1f3      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0xe8>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b44      	ldr	r3, [pc, #272]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1c7      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4937      	ldr	r1, [pc, #220]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e03a      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fc3f 	bl	8000c2c <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc3b 	bl	8000c2c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1a8      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4925      	ldr	r1, [pc, #148]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc1e 	bl	8000c2c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc1a 	bl	8000c2c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e187      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d036      	beq.n	800148c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d016      	beq.n	8001454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x248>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fbfe 	bl	8000c2c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fbfa 	bl	8000c2c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e167      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x200>
 8001452:	e01b      	b.n	800148c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_OscConfig+0x248>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fbe7 	bl	8000c2c <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e00e      	b.n	8001480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fbe3 	bl	8000c2c <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d907      	bls.n	8001480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e150      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 8001474:	40023800 	.word	0x40023800
 8001478:	42470000 	.word	0x42470000
 800147c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ea      	bne.n	8001462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8097 	beq.w	80015c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a7c      	ldr	r2, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b74      	ldr	r3, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fba3 	bl	8000c2c <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fb9f 	bl	8000c2c <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e10c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x2ea>
 8001510:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a63      	ldr	r2, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x30c>
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a5e      	ldr	r2, [pc, #376]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	4b5c      	ldr	r3, [pc, #368]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a5b      	ldr	r2, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 8001540:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a57      	ldr	r2, [pc, #348]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0304 	bic.w	r3, r3, #4
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fb64 	bl	8000c2c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fb60 	bl	8000c2c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0cb      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0ee      	beq.n	8001568 <HAL_RCC_OscConfig+0x334>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fb4e 	bl	8000c2c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fb4a 	bl	8000c2c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0b5      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ee      	bne.n	8001594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a38      	ldr	r2, [pc, #224]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a1 	beq.w	8001714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d05c      	beq.n	8001698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d141      	bne.n	800166a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb1e 	bl	8000c2c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb1a 	bl	8000c2c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e087      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	491b      	ldr	r1, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff faf3 	bl	8000c2c <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff faef 	bl	8000c2c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e05c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x416>
 8001668:	e054      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fadc 	bl	8000c2c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fad8 	bl	8000c2c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e045      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
 8001696:	e03d      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e038      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000
 80016ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x4ec>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d121      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d11a      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cc      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d90c      	bls.n	8001760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d044      	beq.n	8001844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e067      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4934      	ldr	r1, [pc, #208]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff fa0a 	bl	8000c2c <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff fa06 	bl	8000c2c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d20c      	bcs.n	800186c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f96a 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	080023f0 	.word	0x080023f0
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f4:	b090      	sub	sp, #64	; 0x40
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d00d      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x40>
 8001914:	2b08      	cmp	r3, #8
 8001916:	f200 80a1 	bhi.w	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x34>
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3a>
 8001922:	e09b      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001928:	e09b      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192a:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800192e:	e098      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d028      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	623b      	str	r3, [r7, #32]
 8001950:	627a      	str	r2, [r7, #36]	; 0x24
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001958:	2100      	movs	r1, #0
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800195c:	fb03 f201 	mul.w	r2, r3, r1
 8001960:	2300      	movs	r3, #0
 8001962:	fb00 f303 	mul.w	r3, r0, r3
 8001966:	4413      	add	r3, r2
 8001968:	4a43      	ldr	r2, [pc, #268]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800196a:	fba0 1202 	umull	r1, r2, r0, r2
 800196e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001970:	460a      	mov	r2, r1
 8001972:	62ba      	str	r2, [r7, #40]	; 0x28
 8001974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001976:	4413      	add	r3, r2
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	2200      	movs	r2, #0
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	61fa      	str	r2, [r7, #28]
 8001982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800198a:	f7fe fc1d 	bl	80001c8 <__aeabi_uldivmod>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4613      	mov	r3, r2
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001996:	e053      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	2200      	movs	r2, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	617a      	str	r2, [r7, #20]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019aa:	f04f 0b00 	mov.w	fp, #0
 80019ae:	4652      	mov	r2, sl
 80019b0:	465b      	mov	r3, fp
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c0:	0150      	lsls	r0, r2, #5
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ebb2 080a 	subs.w	r8, r2, sl
 80019ca:	eb63 090b 	sbc.w	r9, r3, fp
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019e2:	ebb2 0408 	subs.w	r4, r2, r8
 80019e6:	eb63 0509 	sbc.w	r5, r3, r9
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	00eb      	lsls	r3, r5, #3
 80019f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f8:	00e2      	lsls	r2, r4, #3
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	eb14 030a 	adds.w	r3, r4, sl
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	eb45 030b 	adc.w	r3, r5, fp
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a16:	4629      	mov	r1, r5
 8001a18:	028b      	lsls	r3, r1, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a20:	4621      	mov	r1, r4
 8001a22:	028a      	lsls	r2, r1, #10
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	f7fe fbc8 	bl	80001c8 <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3740      	adds	r7, #64	; 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e041      	b.n	8001b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7fe ff86 	bl	80009b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f000 fa96 	bl	8001fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d001      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e04e      	b.n	8001bd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d022      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5e:	d01d      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d018      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <HAL_TIM_Base_Start_IT+0xd0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00e      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d111      	bne.n	8001bc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d010      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbe:	e007      	b.n	8001bd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40010000 	.word	0x40010000
 8001be4:	40000400 	.word	0x40000400
 8001be8:	40000800 	.word	0x40000800
 8001bec:	40000c00 	.word	0x40000c00
 8001bf0:	40010400 	.word	0x40010400
 8001bf4:	40014000 	.word	0x40014000
 8001bf8:	40001800 	.word	0x40001800

08001bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d122      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d11b      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0202 	mvn.w	r2, #2
 8001c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f9b5 	bl	8001fae <HAL_TIM_IC_CaptureCallback>
 8001c44:	e005      	b.n	8001c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f9a7 	bl	8001f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f9b8 	bl	8001fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d122      	bne.n	8001cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d11b      	bne.n	8001cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0204 	mvn.w	r2, #4
 8001c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2202      	movs	r2, #2
 8001c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f98b 	bl	8001fae <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f97d 	bl	8001f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f98e 	bl	8001fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d122      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d11b      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0208 	mvn.w	r2, #8
 8001cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f961 	bl	8001fae <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f953 	bl	8001f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f964 	bl	8001fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d122      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d11b      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0210 	mvn.w	r2, #16
 8001d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f937 	bl	8001fae <HAL_TIM_IC_CaptureCallback>
 8001d40:	e005      	b.n	8001d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f929 	bl	8001f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f93a 	bl	8001fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d10e      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0201 	mvn.w	r2, #1
 8001d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fc7e 	bl	800067c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	2b80      	cmp	r3, #128	; 0x80
 8001d8c:	d10e      	bne.n	8001dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d98:	2b80      	cmp	r3, #128	; 0x80
 8001d9a:	d107      	bne.n	8001dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fae0 	bl	800236c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	d10e      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d107      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8ff 	bl	8001fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d10e      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d107      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0220 	mvn.w	r2, #32
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 faaa 	bl	8002358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_TIM_ConfigClockSource+0x1c>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e0b4      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x186>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e60:	d03e      	beq.n	8001ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8001e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e66:	f200 8087 	bhi.w	8001f78 <HAL_TIM_ConfigClockSource+0x16c>
 8001e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6e:	f000 8086 	beq.w	8001f7e <HAL_TIM_ConfigClockSource+0x172>
 8001e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e76:	d87f      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x16c>
 8001e78:	2b70      	cmp	r3, #112	; 0x70
 8001e7a:	d01a      	beq.n	8001eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8001e7c:	2b70      	cmp	r3, #112	; 0x70
 8001e7e:	d87b      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x16c>
 8001e80:	2b60      	cmp	r3, #96	; 0x60
 8001e82:	d050      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0x11a>
 8001e84:	2b60      	cmp	r3, #96	; 0x60
 8001e86:	d877      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x16c>
 8001e88:	2b50      	cmp	r3, #80	; 0x50
 8001e8a:	d03c      	beq.n	8001f06 <HAL_TIM_ConfigClockSource+0xfa>
 8001e8c:	2b50      	cmp	r3, #80	; 0x50
 8001e8e:	d873      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x16c>
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d058      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x13a>
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d86f      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x16c>
 8001e98:	2b30      	cmp	r3, #48	; 0x30
 8001e9a:	d064      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0x15a>
 8001e9c:	2b30      	cmp	r3, #48	; 0x30
 8001e9e:	d86b      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x16c>
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d060      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0x15a>
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d867      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x16c>
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d05c      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0x15a>
 8001eac:	2b10      	cmp	r3, #16
 8001eae:	d05a      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0x15a>
 8001eb0:	e062      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6899      	ldr	r1, [r3, #8]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f000 f9ad 	bl	8002220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	609a      	str	r2, [r3, #8]
      break;
 8001ede:	e04f      	b.n	8001f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f000 f996 	bl	8002220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f02:	609a      	str	r2, [r3, #8]
      break;
 8001f04:	e03c      	b.n	8001f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f000 f90a 	bl	800212c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2150      	movs	r1, #80	; 0x50
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f963 	bl	80021ea <TIM_ITRx_SetConfig>
      break;
 8001f24:	e02c      	b.n	8001f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f000 f929 	bl	800218a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2160      	movs	r1, #96	; 0x60
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f953 	bl	80021ea <TIM_ITRx_SetConfig>
      break;
 8001f44:	e01c      	b.n	8001f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	461a      	mov	r2, r3
 8001f54:	f000 f8ea 	bl	800212c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2140      	movs	r1, #64	; 0x40
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f943 	bl	80021ea <TIM_ITRx_SetConfig>
      break;
 8001f64:	e00c      	b.n	8001f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4610      	mov	r0, r2
 8001f72:	f000 f93a 	bl	80021ea <TIM_ITRx_SetConfig>
      break;
 8001f76:	e003      	b.n	8001f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f7c:	e000      	b.n	8001f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <TIM_Base_SetConfig+0x114>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200a:	d00f      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <TIM_Base_SetConfig+0x118>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00b      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3c      	ldr	r2, [pc, #240]	; (8002108 <TIM_Base_SetConfig+0x11c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3b      	ldr	r2, [pc, #236]	; (800210c <TIM_Base_SetConfig+0x120>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <TIM_Base_SetConfig+0x124>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d108      	bne.n	800203e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <TIM_Base_SetConfig+0x114>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d027      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2c      	ldr	r2, [pc, #176]	; (8002104 <TIM_Base_SetConfig+0x118>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d023      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <TIM_Base_SetConfig+0x11c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2a      	ldr	r2, [pc, #168]	; (800210c <TIM_Base_SetConfig+0x120>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <TIM_Base_SetConfig+0x124>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d017      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a28      	ldr	r2, [pc, #160]	; (8002114 <TIM_Base_SetConfig+0x128>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <TIM_Base_SetConfig+0x12c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <TIM_Base_SetConfig+0x130>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <TIM_Base_SetConfig+0x134>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a24      	ldr	r2, [pc, #144]	; (8002124 <TIM_Base_SetConfig+0x138>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a23      	ldr	r2, [pc, #140]	; (8002128 <TIM_Base_SetConfig+0x13c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <TIM_Base_SetConfig+0x114>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0xf8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <TIM_Base_SetConfig+0x124>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d103      	bne.n	80020ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	615a      	str	r2, [r3, #20]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40010000 	.word	0x40010000
 8002104:	40000400 	.word	0x40000400
 8002108:	40000800 	.word	0x40000800
 800210c:	40000c00 	.word	0x40000c00
 8002110:	40010400 	.word	0x40010400
 8002114:	40014000 	.word	0x40014000
 8002118:	40014400 	.word	0x40014400
 800211c:	40014800 	.word	0x40014800
 8002120:	40001800 	.word	0x40001800
 8002124:	40001c00 	.word	0x40001c00
 8002128:	40002000 	.word	0x40002000

0800212c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	f023 0201 	bic.w	r2, r3, #1
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f023 030a 	bic.w	r3, r3, #10
 8002168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	621a      	str	r2, [r3, #32]
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800218a:	b480      	push	{r7}
 800218c:	b087      	sub	sp, #28
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	f023 0210 	bic.w	r2, r3, #16
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	031b      	lsls	r3, r3, #12
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	621a      	str	r2, [r3, #32]
}
 80021de:	bf00      	nop
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	f043 0307 	orr.w	r3, r3, #7
 800220c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	609a      	str	r2, [r3, #8]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800223a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	021a      	lsls	r2, r3, #8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	431a      	orrs	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	bf00      	nop
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002274:	2302      	movs	r3, #2
 8002276:	e05a      	b.n	800232e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a21      	ldr	r2, [pc, #132]	; (800233c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c4:	d01d      	beq.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d018      	beq.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a17      	ldr	r2, [pc, #92]	; (8002350 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a15      	ldr	r2, [pc, #84]	; (8002354 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10c      	bne.n	800231c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	4313      	orrs	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40010000 	.word	0x40010000
 8002340:	40000400 	.word	0x40000400
 8002344:	40000800 	.word	0x40000800
 8002348:	40000c00 	.word	0x40000c00
 800234c:	40010400 	.word	0x40010400
 8002350:	40014000 	.word	0x40014000
 8002354:	40001800 	.word	0x40001800

08002358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <__libc_init_array>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	4d0d      	ldr	r5, [pc, #52]	; (80023b8 <__libc_init_array+0x38>)
 8002384:	4c0d      	ldr	r4, [pc, #52]	; (80023bc <__libc_init_array+0x3c>)
 8002386:	1b64      	subs	r4, r4, r5
 8002388:	10a4      	asrs	r4, r4, #2
 800238a:	2600      	movs	r6, #0
 800238c:	42a6      	cmp	r6, r4
 800238e:	d109      	bne.n	80023a4 <__libc_init_array+0x24>
 8002390:	4d0b      	ldr	r5, [pc, #44]	; (80023c0 <__libc_init_array+0x40>)
 8002392:	4c0c      	ldr	r4, [pc, #48]	; (80023c4 <__libc_init_array+0x44>)
 8002394:	f000 f820 	bl	80023d8 <_init>
 8002398:	1b64      	subs	r4, r4, r5
 800239a:	10a4      	asrs	r4, r4, #2
 800239c:	2600      	movs	r6, #0
 800239e:	42a6      	cmp	r6, r4
 80023a0:	d105      	bne.n	80023ae <__libc_init_array+0x2e>
 80023a2:	bd70      	pop	{r4, r5, r6, pc}
 80023a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a8:	4798      	blx	r3
 80023aa:	3601      	adds	r6, #1
 80023ac:	e7ee      	b.n	800238c <__libc_init_array+0xc>
 80023ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b2:	4798      	blx	r3
 80023b4:	3601      	adds	r6, #1
 80023b6:	e7f2      	b.n	800239e <__libc_init_array+0x1e>
 80023b8:	08002408 	.word	0x08002408
 80023bc:	08002408 	.word	0x08002408
 80023c0:	08002408 	.word	0x08002408
 80023c4:	0800240c 	.word	0x0800240c

080023c8 <memset>:
 80023c8:	4402      	add	r2, r0
 80023ca:	4603      	mov	r3, r0
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d100      	bne.n	80023d2 <memset+0xa>
 80023d0:	4770      	bx	lr
 80023d2:	f803 1b01 	strb.w	r1, [r3], #1
 80023d6:	e7f9      	b.n	80023cc <memset+0x4>

080023d8 <_init>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	bf00      	nop
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr

080023e4 <_fini>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr
